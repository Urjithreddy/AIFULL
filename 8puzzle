import heapq
import itertools

def heuristic(state, goal):
    return sum(abs(b % 3 - g % 3) + abs(b // 3 - g // 3) for b, g in ((state.index(i), goal.index(i)) for i in range(1, 9)))

def print_puzzle(state):
    puzzle = "\n".join([' '.join(['{:2}'.format(item) if item != 0 else '  ' for item in row]) for row in (state[:3], state[3:6], state[6:])])
    print(puzzle, "\n")

def a_star(start, goal):
    """A* Algorithm"""
    pq = []
    entry_finder = {}
    counter = itertools.count()
    g_score = {start: 0}
    f_score = {start: heuristic(start, goal)}
    heapq.heappush(pq, (f_score[start], next(counter), start))

    while pq:
        current = heapq.heappop(pq)[-1]

        if current == goal:
            return reconstruct_path(current, entry_finder)

        neighbors = get_neighbors(current)
        for neighbor in neighbors:
            tentative_g_score = g_score[current] + 1
            if tentative_g_score < g_score.get(neighbor, float('inf')):
                g_score[neighbor] = tentative_g_score
                f_score[neighbor] = tentative_g_score + heuristic(neighbor, goal)
                entry_finder[neighbor] = current
                heapq.heappush(pq, (f_score[neighbor], next(counter), neighbor))

    return None

def reconstruct_path(current, entry_finder):
    path = [current]
    while current in entry_finder:
        current = entry_finder[current]
        path.append(current)
    path.reverse()
    return path

def get_neighbors(state):
    def swap(a, b):
        new_state = list(state)
        new_state[a], new_state[b] = new_state[b], new_state[a]
        return tuple(new_state)

    zero = state.index(0)
    x, y = divmod(zero, 3)
    neighbors = []
    if x > 0: neighbors.append(swap(zero, zero - 3))
    if x < 2: neighbors.append(swap(zero, zero + 3))
    if y > 0: neighbors.append(swap(zero, zero - 1))
    if y < 2: neighbors.append(swap(zero, zero + 1))
    return neighbors

# Example usage:
start = (1, 2,5, 3, 4, 6, 7, 8, 0)
goal = (1, 2, 3, 4, 5, 6, 7, 8, 0)   

solution = a_star(start, goal)
if solution:
    for step in solution:
        print_puzzle(step)
else:
    print("No solution found.")
